/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reportes;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import mobiliario.Mobiliario;

/**
 *
 * @author usuario
 */
public class ReportesDAO extends conexion.ConexionOracle implements java.io.Serializable {

    public int insertaReporte(Reporte reporte) {
        System.out.println("Entro a insertar ");
        int valor = 0;
        ResultSet rs = null;
        final String query = "INSERT INTO REPORTE (IDREPORTE,\n"
                + "       REPORTE,\n"
                + "       QUERY,\n"
                + "       OBSERVACIONES,\n"
                + "       TITULO1,\n"
                + "       TITULO2,\n"
                + "       TITULO3,\n"
                + "       TITULO4,\n"
                + "       TITULO5,\n"
                + "       IDESTATUS) "
                + " VALUES (?,?,?,?,?,?,?,?,?,1)";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{
                reporte.getIdReporte(),
                reporte.getReporte(),
                reporte.getQuery(),
                reporte.getObservaciones(),
                reporte.getTitulo1(),
                reporte.getTitulo2(),
                reporte.getTitulo3(),
                reporte.getTitulo4(),
                reporte.getTitulo5()
            }
            ).executeQuery();

        } catch (SQLException e) {
            System.out.println("Error en insertaReporte() " + e.getMessage());

        } finally {
            try {
                if (null != rs) {
                    valor = 1;
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en insertaReporte() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        System.out.println("valor: " + valor);
        return valor;
    }

    public int actualizaReporte(Reporte reporte) {
        int valor = 0;
        ResultSet rs = null;
        final String query = "UPDATE REPORTE set REPORTE = ?,\n"
                + "       QUERY = ?,\n"
                + "       OBSERVACIONES = ?,\n"
                + "       TITULO1 = ?,\n"
                + "       TITULO2 = ?,\n"
                + "       TITULO3 = ?,\n"
                + "       TITULO4 = ?,\n"
                + "       TITULO5 = ? \n"
                + " where IDREPORTE = ? ";

        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{
                reporte.getReporte(),
                reporte.getQuery(),
                reporte.getObservaciones(),
                reporte.getTitulo1(),
                reporte.getTitulo2(),
                reporte.getTitulo3(),
                reporte.getTitulo4(),
                reporte.getTitulo5(),
                reporte.getIdReporte()}).executeQuery();

        } catch (SQLException e) {
            System.out.println("Error en actualizaReporte() " + e.getMessage());
        } finally {
            try {
                if (null != rs) {
                    valor = 1;
                    rs.close();
                }

            } catch (SQLException e) {
                System.out.println("Error en actualizaReporte() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return valor;
    }

    public int eliminaReporte(Reporte reporte, int opcion) {
        int valor = 0;
        ResultSet rs = null;
        final String query = "UPDATE REPORTE set IDESTATUS = ? WHERE IDREPORTE = ? ";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{opcion, reporte.getIdReporte()}).executeQuery();

        } catch (SQLException e) {
            System.out.println("Error en eliminaReporte() " + e.getMessage());
        } finally {
            try {
                if (null != rs) {
                    valor = 1;
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en eliminaReporte() " + e.getMessage());

            }
            super.cerrarConexion();
        }
        return valor;
    }

    public int getNumeroSiguiente() {
        int id = 0;
        ResultSet rs = null;
        final String query = "select nvl(max(IDREPORTE),0)+ 1 from REPORTE ";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();
            if (rs.next()) {
                id = rs.getInt(1);
            }
        } catch (SQLException e) {
            System.out.println("Error en getNumeroSiguiente() " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en getNumeroSiguiente() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return id;
    }
    
    public Reporte traeReporte(int valor) {
        System.out.println("Entro a cargar listaReporte");
        Reporte reporte = null;
        ResultSet rs = null;
        String query = null;
        String continuacion = " WHERE IDREPORTE = "+valor;
        query = "SELECT IDREPORTE,\n"
                + "       REPORTE,\n"
                + "       QUERY,\n"
                + "       OBSERVACIONES,\n"
                + "       TITULO1,\n"
                + "       TITULO2,\n"
                + "       TITULO3,\n"
                + "       TITULO4,\n"
                + "       TITULO5,\n"
                + "       IDESTATUS\n"
                + " FROM REPORTE " + continuacion + " ";

        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();

            while (rs.next()) {
                reporte = new Reporte();
                reporte.setIdReporte(rs.getInt("IDREPORTE"));
                reporte.setReporte(rs.getString("REPORTE"));
                reporte.setQuery(rs.getString("QUERY"));
                reporte.setObservaciones(rs.getString("OBSERVACIONES"));
                reporte.setTitulo1(rs.getString("TITULO1"));
                reporte.setTitulo2(rs.getString("TITULO2"));
                reporte.setTitulo3(rs.getString("TITULO3"));
                reporte.setTitulo4(rs.getString("TITULO4"));
                reporte.setTitulo5(rs.getString("TITULO5"));
                reporte.setIdEstatus(rs.getInt("IDESTATUS"));

            }
            System.out.println("Reporte.getTitulo1() = " + reporte.getTitulo1());
        } catch (SQLException e) {
            System.out.println("Error en Reporte() " + e.getMessage());
            reporte = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en reporte() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return reporte;
    }

    public List<Reporte> traeRegistros(int valor) {
        List<Reporte> listaReporte;
        System.out.println("Entro a cargar listaReporte");
        Reporte reporte = null;
        ResultSet rs = null;
        String query = null;
        String continuacion = valor == 1 ? " WHERE IDESTATUS = 1" : "";
        query = "SELECT IDREPORTE,\n"
                + "       REPORTE,\n"
                + "       QUERY,\n"
                + "       OBSERVACIONES,\n"
                + "       TITULO1,\n"
                + "       TITULO2,\n"
                + "       TITULO3,\n"
                + "       TITULO4,\n"
                + "       TITULO5,\n"
                + "       IDESTATUS\n"
                + " FROM REPORTE " + continuacion + " ORDER BY 1";

        try {
            listaReporte = new ArrayList<>();
            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();

            while (rs.next()) {
                reporte = new Reporte();
                reporte.setIdReporte(rs.getInt("IDREPORTE"));
                reporte.setReporte(rs.getString("REPORTE"));
                reporte.setQuery(rs.getString("QUERY"));
                reporte.setObservaciones(rs.getString("OBSERVACIONES"));
                reporte.setTitulo1(rs.getString("TITULO1"));
                reporte.setTitulo2(rs.getString("TITULO2"));
                reporte.setTitulo3(rs.getString("TITULO3"));
                reporte.setTitulo4(rs.getString("TITULO4"));
                reporte.setTitulo5(rs.getString("TITULO5"));
                reporte.setIdEstatus(rs.getInt("IDESTATUS"));
                listaReporte.add(reporte);

            }
            System.out.println("listaReporte.size() = " + listaReporte.size());
        } catch (SQLException e) {
            System.out.println("Error en listaReporte() " + e.getMessage());
            listaReporte = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en listaReporte() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return listaReporte;
    }

    public List<Reporte> traeRegistrosConsulta(int noUsuario) {
        List<Reporte> listaReporte;
        System.out.println("Entro a cargar listaReporteConsulta");
        Reporte reporte = null;
        ResultSet rs = null;
        String query = null;
        query = "SELECT RE.IDREPORTE,\n"
                + "  RE.REPORTE,\n"
                + "  RE.QUERY,\n"
                + "       TITULO1,\n"
                + "       TITULO2,\n"
                + "       TITULO3,\n"
                + "       TITULO4,\n"
                + "       TITULO5,\n"
                + "  RE.OBSERVACIONES,\n"
                + "  RE.IDESTATUS\n"
                + "FROM REPORTE RE,\n"
                + "  ROL_REPORTE RR,\n"
                + "  ROLES_USUARIOS RU\n"
                + "WHERE RU.NO_ROL  = RR.NO_ROL\n"
                + "AND RR.IDREPORTE = RE.IDREPORTE\n"
                + "AND RE.IDESTATUS =1 \n"
                + "AND RU.IDESTATUS =1 \n"
                + "AND RU.NO_USUARIO=" + noUsuario + " ORDER BY 1";

        try {
            listaReporte = new ArrayList<>();
            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();

            while (rs.next()) {
                reporte = new Reporte();
                reporte.setIdReporte(rs.getInt("IDREPORTE"));
                reporte.setReporte(rs.getString("REPORTE"));
                reporte.setQuery(rs.getString("QUERY"));
                reporte.setTitulo1(rs.getString("TITULO1"));
                reporte.setTitulo2(rs.getString("TITULO2"));
                reporte.setTitulo3(rs.getString("TITULO3"));
                reporte.setTitulo4(rs.getString("TITULO4"));
                reporte.setTitulo5(rs.getString("TITULO5"));
                reporte.setObservaciones(rs.getString("OBSERVACIONES"));
                reporte.setIdEstatus(rs.getInt("IDESTATUS"));
                listaReporte.add(reporte);

            }
            System.out.println("listaReporteConsulta.size() = " + listaReporte.size());
        } catch (SQLException e) {
            System.out.println("Error en listaReporteConsulta() " + e.getMessage());
            listaReporte = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en listaReporteConsulta() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return listaReporte;
    }

    public ResultSet getConsulta(String query) {
        ResultSet cursor = null;
        System.out.println(query);
        try {
            super.abrirConexion();

            cursor = super.getPreparedStatement(query).executeQuery();
        } catch (Exception e) {
            System.out.println("Error en getConsulta() " + e.getMessage());
        }
        return cursor;
    }

    public Map<Integer, String> obtenerDepartamentos() {
        Map<Integer, String> mapDepartamentos = new HashMap();
        ResultSet rs = null;
        String query = null;
        query = "SELECT IDDEPARTAMENTO, NOMDEPTO FROM DEPARTAMENTO ORDER BY 1";
        try {

            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();

            while (rs.next()) {
                mapDepartamentos.put(rs.getInt(1), rs.getString(2));

            }

        } catch (SQLException e) {
            System.out.println("Error en obternerDepartamentos() " + e.getMessage());
            mapDepartamentos = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en listaReporte() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return mapDepartamentos;

    }

    public Map<Integer, String> obtenerURs() {
        Map<Integer, String> mapUr = new HashMap();
        ResultSet rs = null;
        String query = null;
        query = "SELECT IDUR, UR FROM UR ORDER BY 1";
        try {

            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();

            while (rs.next()) {
                mapUr.put(rs.getInt(1), rs.getString(2));

            }

        } catch (SQLException e) {
            System.out.println("Error en obternerUR() " + e.getMessage());
            mapUr = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en listaReporte() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return mapUr;

    }

    public List<Mobiliario> traeSiere(int dato, int tipo) {
        List<Mobiliario> listaMobiliario;
        System.out.println("Entro a cargar listaMobiliario");
        Mobiliario mobiliario = null;
        ResultSet rs = null;
        String query = null;
        String tipoQuery = null;

        String queryDepto = "FROM MOBILIARIO MO,\n"
                + "     DEPARTAMENTO DE,\n"
                 + "    UR UR,\n"
                + "     CLASIFICADOR CL,\n"
                + "     KESTADODELBIEN KE,\n"
                + "     KPROVEEDOR KP\n"
                + " WHERE MO.IDDEPARTAMENTO = DE.IDDEPARTAMENTO\n"
                + "   AND DE.IDUR = UR.IDUR\n"
                + "  AND MO.IDDEPARTAMENTO = ?\n"
                + "  AND MO.IDCLASIFICADOR = CL.IDCLASIFICADOR\n"
                + "  AND MO.IDESTADODELBIEN = KE.IDESTADODELBIEN\n"
                + "  AND MO.IDPROVEEDOR = KP.IDPROVEEDOR\n"
                + "ORDER BY 1";

        String queryUR = "FROM MOBILIARIO MO,\n"
                + "     DEPARTAMENTO DE,\n"
                + "     UR UR,\n"
                + "     CLASIFICADOR CL,\n"
                + "     KESTADODELBIEN KE,\n"
                + "    KPROVEEDOR KP\n"
                + " WHERE MO.IDDEPARTAMENTO = DE.IDDEPARTAMENTO\n"
                + "   AND DE.IDUR = UR.IDUR\n"
                + "   AND MO.IDDEPARTAMENTO IN (SELECT DEP.IDDEPARTAMENTO FROM DEPARTAMENTO DEP WHERE DEP.IDUR = ?)\n"
                + "   AND MO.IDCLASIFICADOR = CL.IDCLASIFICADOR\n"
                + "   AND MO.IDESTADODELBIEN = KE.IDESTADODELBIEN\n"
                + "   AND MO.IDPROVEEDOR = KP.IDPROVEEDOR\n"
                + "ORDER BY DE.NOMDEPTO";

        String queryBloque = "FROM MOBILIARIO MO,\n"
                + "     DEPARTAMENTO DE,\n"
                + "     UR UR,\n"
                + "     CLASIFICADOR CL,\n"
                + "     KESTADODELBIEN KE,\n"
                + "    KPROVEEDOR KP\n"
                + " WHERE MO.IDDEPARTAMENTO = DE.IDDEPARTAMENTO\n"
                + "   AND DE.IDUR = UR.IDUR\n"
                + "   AND MO.IDDEPARTAMENTO IN (SELECT DEP.IDDEPARTAMENTO FROM DEPARTAMENTO DEP WHERE DEP.NOBLOQUE = ?)\n"
                + "   AND MO.IDCLASIFICADOR = CL.IDCLASIFICADOR\n"
                + "   AND MO.IDESTADODELBIEN = KE.IDESTADODELBIEN\n"
                + "   AND MO.IDPROVEEDOR = KP.IDPROVEEDOR\n"
                + "ORDER BY DE.NOMDEPTO";

        switch (tipo) {
            case 1:
                tipoQuery = queryDepto;
                break;
            case 2:
                tipoQuery = queryUR;
                break;
            case 3:
                tipoQuery = queryBloque;
                break;

        }

        query = "SELECT  MO.IDBIEN,\n"
                + "   MO.IME,\n"
                + "   MO.MARCA,\n"
                + "   MO.SERIE,\n"
                + "   MO.MODELO,\n"
                + "   MO.COLOR,\n"
                + "   MO.MATERIAL,\n"
                + "   MO.COSTOTOTAL,\n"
                + "   MO.NUMFACTURA,\n"
                + "   MO.FECHAFACTURA,\n"
                + "   MO.NUMCHEQUE,\n"
                + "   MO.FECHAALTA,\n"
                + "   MO.NOUSUARIOALTA,\n"
                + "   MO.IDPROVEEDOR,\n"
                + "   MO.IDFORMAADQUISICION,\n"
                + "   MO.IDORIGENRECURSO,\n"
                + "   MO.IDESTADODELBIEN,\n"
                + "   MO.OBSERVACIONES,\n"
                + "   MO.IDCLASIFICADOR,\n"
                + "   MO.IDDEPARTAMENTO,\n"
                + "   MO.FECHABAJA,\n"
                + "   MO.NOUSUARIOBAJA,\n"
                + "   MO.FECHAULTIMAMODIF,\n"
                + "   MO.NOUSUARIOULTIMAMODIF,\n"
                + "   MO.IDESTATUS,\n"
                + "   CL.DESCRIPCION,\n"
                + "   KE.ESTADODELBIEN,\n"
                + "   KP.NOMBRE PROVEEDOR,\n"
                + "   CL.CLASIFICADOROG,\n"
                + "   DE.NOMDEPTO,\n"
                + "   UR.UR,\n"
                + "   DE.NOBLOQUE,\n"
                + "   CASE CL.CLASIFICADOROG WHEN '5150' THEN 'ANEXO V2'\n"
                + "                          WHEN '5190' THEN 'ANEXO V18'\n"
                + "                          WHEN '5210' THEN 'ANEXO V18'\n"
                + "                          WHEN '5290' THEN 'ANEXO V18'\n"
                + "                          WHEN '5130' THEN 'ANEXO V6'\n"
                + "                          WHEN '5910' THEN 'ANEXO V4'\n"
                + "                          ELSE 'ANEXO V1' END ANEXO\n"
                + tipoQuery;

        try {
            listaMobiliario = new ArrayList<>();
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{dato}).executeQuery();

            while (rs.next()) {
                mobiliario = new Mobiliario();
                mobiliario.setIdBien(rs.getInt("IDBIEN"));
                mobiliario.setIme(rs.getInt("IME"));
                mobiliario.setMarca(rs.getString("MARCA"));
                mobiliario.setSerie(rs.getString("SERIE"));
                mobiliario.setModelo(rs.getString("MODELO"));
                mobiliario.setColor(rs.getString("COLOR"));
                mobiliario.setMaterial(rs.getString("MATERIAL"));
                mobiliario.setCostoTotal(rs.getInt("COSTOTOTAL"));
                mobiliario.setNumFactura(rs.getString("NUMFACTURA"));
                mobiliario.setFechaFactura(rs.getDate("FECHAFACTURA"));
                mobiliario.setNumCheque(rs.getString("NUMCHEQUE"));
                mobiliario.setFechaAlta(rs.getString("FECHAALTA"));
                mobiliario.setNoUsuarioAlta(rs.getInt("NOUSUARIOALTA"));
                mobiliario.setIdProveedor(rs.getInt("IDPROVEEDOR"));
                mobiliario.setIdFormaAdquisicion(rs.getInt("IDFORMAADQUISICION"));
                mobiliario.setIdOrigenRecurso(rs.getInt("IDORIGENRECURSO"));
                mobiliario.setIdEstadoDelBien(rs.getInt("IDESTADODELBIEN"));
                mobiliario.setObservaciones(rs.getString("OBSERVACIONES"));
                mobiliario.setIdClasificador(rs.getInt("IDCLASIFICADOR"));
                mobiliario.setIdDepartamento(rs.getInt("IDDEPARTAMENTO"));
                mobiliario.setFechaBaja(rs.getString("FECHABAJA"));
                mobiliario.setNoUsuarioBaja(rs.getInt("NOUSUARIOBAJA"));
                mobiliario.setFechaUltimaModif(rs.getString("FECHAULTIMAMODIF"));
                mobiliario.setNoUsuarioUltimaModif(rs.getInt("NOUSUARIOULTIMAMODIF"));
                mobiliario.setIdEstatus(rs.getInt("IDESTATUS"));
                mobiliario.setClasificador(rs.getString("DESCRIPCION"));
                mobiliario.setDepartamento(rs.getString("NOMDEPTO"));
                mobiliario.setAnexo(rs.getString("ANEXO"));
                mobiliario.setClasificadorOg(rs.getString("CLASIFICADOROG"));
                mobiliario.setEstadoDelBien(rs.getString("ESTADODELBIEN"));
                mobiliario.setNombreProveedor(rs.getString("PROVEEDOR"));
                mobiliario.setDepartamento(rs.getString("NOMDEPTO"));
                mobiliario.setNombreUR(rs.getString("UR"));
                mobiliario.setBloque(rs.getString("NOBLOQUE"));

                listaMobiliario.add(mobiliario);

            }
            System.out.println("listaMobiliario.size() = " + listaMobiliario.size());
        } catch (SQLException e) {
            System.out.println("Error en listaMobiliario() " + e.getMessage());
            listaMobiliario = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en listaMobiliario() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return listaMobiliario;
    }
}
