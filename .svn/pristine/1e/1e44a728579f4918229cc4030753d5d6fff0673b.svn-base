package usuarios;

import departamento.Departamento;
import java.io.Serializable;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import personal.Personal;

public class UsuariosDAO extends conexion.ConexionOracle implements Serializable {

    public Usuarios existePersona(String clave, String pas) {
        Usuarios usuario = null;
        ResultSet rs = null;
        final String query = "  SELECT NO_USUARIO, NOMBRE,APELLIDO_PATERNO,APELLIDO_MATERNO "
                + "  FROM USUARIOS "
                + " WHERE CLAVE = ? "
                + "  AND  ENC.DESENCRIP(PASAPORTE) =  ?  AND IDESTATUS = 1 ";
        try {
            //System.out.println(query);
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{clave, pas}).executeQuery();
            usuario = new Usuarios();
            if (rs.next()) {
                usuario.setNoUsuario(rs.getInt(1));
                usuario.setNombre(rs.getString(2));
                usuario.setApellidoPaterno(rs.getString(3));
                usuario.setApellidoMaterno(rs.getString(4));
            }
            System.err.println("valor de la consulta: " + usuario.getNoUsuario());
        } catch (SQLException e) {
            System.out.println("Error en existePersona() " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en existePersona() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return usuario;
    }

    public Long existePersonaSP(String clave) {
        long existe = 0;
        ResultSet rs = null;
        final String query = "  SELECT NO_USUARIO "
                + "  FROM USUARIOS "
                + " WHERE CLAVE = ? ";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{clave}).executeQuery();
            if (rs.next()) {
                existe = (rs.getLong(1));
            }
            System.err.println("valor de la consulta: " + existe);
        } catch (SQLException e) {
            System.out.println("Error en existePersonaSP() " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en existePersonaSP() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return existe;
    }

    public boolean existeRolUsuario(int noUsuario) {
        boolean existe = false;
        ResultSet rs = null;
        final String query = "  SELECT COUNT(1) "
                + "  FROM ROLES_USUARIOS "
                + "  WHERE NO_USUARIO =  ? AND IDESTATUS = 1  ";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{noUsuario}).executeQuery();
            if (rs.next()) {
                existe = (rs.getInt(1) >= 1);
            }
            System.err.println("valor de la consulta: " + existe);
        } catch (SQLException e) {
            System.out.println("Error en existeRolUsuario() " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en existeRolUsuario() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return existe;
    }
    
    public boolean existeDepUsuario(int clave) {
        boolean existe = false;
        ResultSet rs = null;
        final String query = "  SELECT COUNT(1) "
                + "  FROM USUARIOS_DEPARTAMENTO "
                + "  WHERE NO_USUARIO =  ?   ";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{clave}).executeQuery();
            if (rs.next()) {
                existe = rs.getInt(1) >= 1;
            }
            System.err.println("valor de la consulta: " + existe);
        } catch (SQLException e) {
            System.out.println("Error en existeDepUsuario() " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en existeDepUsuario() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return existe;
    }
    
    public boolean existeRolUsuarioAsignar(int noUsuario, int noRol) {
        boolean existe = false;
        ResultSet rs = null;
        final String query = "  SELECT COUNT(1) "
                + "  FROM ROLES_USUARIOS "
                + "  WHERE NO_USUARIO =  ?  AND NO_ROL = ? AND IDESTATUS = 2";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{noUsuario, noRol}).executeQuery();
            if (rs.next()) {
                existe = (rs.getInt(1) >= 1);
            }
            System.err.println("valor de la consulta: " + existe);
        } catch (SQLException e) {
            System.out.println("Error en existeRolUsuarioAsignar() " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en existeRolUsuarioAsignar() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return existe;
    }

    public int insertaUsuario(Usuarios us) {
        System.out.println("Entro a insertar ");
        System.out.println("no_usuario: " + us.getNoUsuario());
        ResultSet rs = null;
        int valor = 0;
        final String query = "INSERT INTO USUARIOS (NO_USUARIO, CLAVE, PASAPORTE, NOMBRE,APELLIDO_PATERNO,APELLIDO_MATERNO, "
                + "   CORREO, TELEFONO, TELEFONO2, IDESTATUS, FECHA_AUDITORIA, NOPERSONALBM) "
                + "VALUES (?,?,ENC.ENCRIP(?),?,?,?,?,?,?,1,SYSDATE,?)";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{
                us.getNoUsuario(),
                us.getClave(),
                us.getPasaporte(),
                us.getNombre(),
                us.getApellidoPaterno(),
                us.getApellidoMaterno(),
                us.getCorreo(),
                us.getTelefono(),
                us.getTelefono2(),
                us.getNoPersonalBm()
            }
            ).executeQuery();
        } catch (SQLException e) {
            System.out.println("Error en insertaPersona() " + e.getMessage());
        } finally {
            try {
                if (null != rs) {
                    valor = 1;
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en insertaPersona() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return valor;
    }

    public int actualizaUsuario(Usuarios us) {
        System.out.println("user: " + us.getNoUsuario());
        System.out.println("pasaporte: " + us.getPasaporte());
        System.out.println("no_usuario: " + us.getNoUsuario());
        System.out.println("NOPERSONALBM: " + us.getNoPersonalBm());
        ResultSet rs = null;
        int valor = 0;
        final String query = "UPDATE USUARIOS set CLAVE = ?, NOMBRE = ? ,"
                + " APELLIDO_PATERNO = ? ,APELLIDO_MATERNO = ? ,CORREO = ? , TELEFONO = ?,TELEFONO2 = ?, NOPERSONALBM = ? "
                + " where NO_USUARIO = ? ";

        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{us.getClave(),
                us.getNombre(),
                us.getApellidoPaterno(),
                us.getApellidoMaterno(),
                us.getCorreo(),
                us.getTelefono(),
                us.getTelefono2(),
                us.getNoPersonalBm(),
                us.getNoUsuario()
                }).executeQuery();

        } catch (SQLException e) {
            System.out.println("Error en actualiza() " + e.getMessage());
        } finally {
            try {
                if (null != rs) {
                    valor = 1;
                    rs.close();
                }

            } catch (SQLException e) {
                System.out.println("Error en actualiza() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return valor;
    }

    public int actualizaPasaporte(int us, String pas) {
        System.out.println("user: " + us);
        System.out.println("pasaporte: " + pas);

        ResultSet rs = null;
        int valor = 0;
        final String query = "UPDATE USUARIOS set PASAPORTE =  ENC.ENCRIP(?) "
                + " where NO_USUARIO = ? ";

        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{pas, us}).executeQuery();

        } catch (SQLException e) {
            System.out.println("Error en actualiza() " + e.getMessage());
        } finally {
            try {
                if (null != rs) {
                    valor = 1;
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en actualiza() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return valor;
    }

    public int eliminaUsuario(Usuarios us) {
        System.out.println("clave: " + us.getClave());
        System.out.println("no_usuario: " + us.getNoUsuario());
        System.out.println("Entro a eliminar valor: " + us.getNoUsuario());
        ResultSet rs = null;
        int valor = 0;
        final String query = "UPDATE USUARIOS set IDESTATUS = 2 where no_usuario = ? ";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{us.getNoUsuario()}).executeQuery();

        } catch (SQLException e) {
            System.out.println("Error en eliminaPersona() " + e.getMessage());
        } finally {
            try {
                if (null != rs) {
                    valor = 1;
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en eliminaPersona() " + e.getMessage());

            }
            super.cerrarConexion();
        }
        return valor;
    }

    public void eliminaRolUsuario(int noUsuario) {

        System.out.println("Entro a eliminar valor: " + noUsuario);
        ResultSet rs = null;
        final String query = "UPDATE ROLES_USUARIOS set IDESTATUS = 2 WHERE no_usuario = ? ";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{noUsuario}).executeQuery();

        } catch (SQLException e) {
            System.out.println("Error en eliminaRolUsuario() " + e.getMessage());
        } finally {
            try {
                if (null != rs) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en eliminaRolUsuario() " + e.getMessage());

            }
            super.cerrarConexion();
        }
    }
    
    public void eliminaDepUsuario(Usuarios us) {

        System.out.println("Entro a eliminar valor: " + us.getNoUsuario());
        ResultSet rs = null;
        final String query = "DELETE FROM USUARIOS_DEPARTAMENTO WHERE NO_USUARIO = ? ";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{us.getNoUsuario()}).executeQuery();

        } catch (SQLException e) {
            System.out.println("Error en eliminaDepUsuario() " + e.getMessage());
        } finally {
            try {
                if (null != rs) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en eliminaDepUsuario() " + e.getMessage());

            }
            super.cerrarConexion();
        }
    }
    
    public int asignaRolUsuario(int usuario, int rol) {
        System.out.println("Entro a Asignar ");
        System.out.println("no_rol: " + rol + "usuario: " + usuario);
        ResultSet rs = null;
        int valor = 0;
        String query = null;
        Boolean existe = existeRolUsuarioAsignar(usuario, rol);
        if (existe) {
            query = "UPDATE ROLES_USUARIOS SET IDESTATUS = 1 WHERE no_usuario = ? AND no_rol = ?";
        } else {
            query = "INSERT INTO ROLES_USUARIOS (no_usuario, no_rol, idestatus) "
                    + "VALUES (?,?,1)";
        }
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{usuario, rol}).executeQuery();
        } catch (SQLException e) {
            System.out.println("Error en asignaUsuarioRol() " + e.getMessage());

        } finally {
            try {
                if (null != rs) {
                    valor = 1;
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en asignaUsuarioRol() " + e.getMessage());

            }
            super.cerrarConexion();
        }
        return valor;
    }
    
    public int asignaDepUsuario(int usuario, List<Departamento> deps) {
        System.out.println("Entro a Asignar Departamento a usuario " + usuario);
        ResultSet rs = null;
        int valor = 0;
        String query = "";
        try {
            super.abrirConexion();
            for (Departamento x : deps) {
                if (x.isDepartamentoSeleccionado()) {
                    query = "INSERT INTO USUARIOS_DEPARTAMENTO (IDDEPARTAMENTO, NO_USUARIO) VALUES (?,?) ";
                    super.getPreparedStatement(query, new Object[]{x.getIdDepartamento(), usuario}).executeQuery();
                    query = "";
                    valor++;
                }
            }

        } catch (SQLException e) {
            System.out.println("Error en asignaDepUsuario() " + e.getMessage());
            valor = -1;
        } finally {
            try {
                if (null != rs) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en asignaDepUsuario() " + e.getMessage());
                valor = -1;
            }
            super.cerrarConexion();
        }
        return valor;
    }
    
    public int getNoUsuarioSiguiente() {
        int noUsuario = 0;
        ResultSet rs = null;
        final String query = "select nvl(max(no_usuario),0)+ 1 from USUARIOS";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();
            if (rs.next()) {
                noUsuario = rs.getInt(1);
            }
        } catch (SQLException e) {
            System.out.println("Error en getNoUsuarioSiguiente() " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en getNoUsuarioSiguiente() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return noUsuario;
    }

    public void ejecutarQuery(String query) {

        System.out.println("Entro a ejecutar query: " + query);

        ResultSet rs = null;
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();
        } catch (SQLException e) {
            System.out.println("Error en ejecutarquery() " + e.getMessage());
        } finally {
            try {
                if (null != rs) {
                    rs.close();
                }
                super.cerrarConexion();
            } catch (SQLException e) {
                System.out.println("Error en ejecutarquery() " + e.getMessage());
            }
            super.cerrarConexion();
        }
    }

    public List<Usuarios> traeRegistros() {
        List<Usuarios> listaPersonas;
        System.out.println("Entro a cargar la lista de registros");
        Usuarios persona = null;
        ResultSet rs = null;
        String query = null;
        query = "select ua.no_usuario as no_usuario, ua.CLAVE as usuario , ua.correo as correo, ua.nombre as nombre, \n"
                + "                  UA.APELLIDO_PATERNO AS APELLIDO_PATERNO, UA.APELLIDO_MATERNO AS APELLIDO_MATERNO, UA.TELEFONO AS TELEFONO, UA.TELEFONO2 AS TELEFONO2, \n"
                + "               (SELECT RU.NO_ROL FROM ROLES_USUARIOS RU WHERE RU.NO_USUARIO=UA.NO_USUARIO AND RU.IDESTATUS=1) AS rol,\n"
                + "               (SELECT RO.DESCRIPCION FROM ROLES_USUARIOS RU, ROLES RO\n"
                + "               WHERE RU.NO_USUARIO=UA.NO_USUARIO\n"
                + "               AND RO.NO_ROL=RU.NO_ROL\n"
                + "               \n"
                + "               AND RO.IDESTATUS =1 AND RU.IDESTATUS=1) AS nombreRol, UA.IDESTATUS, UA.NOPERSONALBM, \n"
                + "              (select PE.NOMBRE||' '||PE.AP1||' '||PE.AP2 from PERSONAL PE where PE.NOPERSONALBM = UA.NOPERSONALBM) NOMPERSONAL"
                + "               FROM USUARIOS UA\n"
                + "                \n"
                + "               order by 1";

        try {
            listaPersonas = new ArrayList<>();
            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();

            while (rs.next()) {

                persona = new Usuarios();
                persona.setNoUsuario(rs.getInt("no_usuario"));
                persona.setClave(rs.getString("usuario"));
                persona.setNombre(rs.getString("nombre"));
                persona.setApellidoPaterno(rs.getString("apellido_paterno"));
                persona.setApellidoMaterno(rs.getString("apellido_materno"));
                persona.setCorreo(rs.getString("correo"));
                persona.setTelefono(rs.getString("telefono"));
                persona.setTelefono2(rs.getString("telefono2"));
                persona.setNoRol(rs.getInt("rol"));
                String desc = "";
                if (rs.getString("nombreRol") != (null)) {
                    desc = rs.getString("nombreRol");
                } else {
                    desc = "SIN ROL";
                }
                persona.setDescripcionRol(desc);
                persona.setNomPersonal(rs.getString("NOMPERSONAL"));
                persona.setIdestatus(rs.getInt("IDESTATUS"));
                persona.setNoPersonalBm(rs.getInt("NOPERSONALBM"));
                listaPersonas.add(persona);

            }
            System.out.println("listaPersona.size() = " + listaPersonas.size());
        } catch (SQLException e) {
            System.out.println("Error en listaPersona1() " + e.getMessage());
            listaPersonas = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en listaPersona2() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return listaPersonas;
    }
    
    public List<Departamento> traeRegistrosdep(Usuarios us) {
        List<Departamento> listaDepartamento;
        System.out.println("Entro a cargar la lista de registros listaDepartamento , el usuario es:" + us.getNoUsuario());
        Departamento d = null;
        ResultSet rs = null;
        String query = null;
        query = "SELECT dep.iddepartamento,\n"
                + "  dep.nomdepto,\n"
                + "  dep.idur,\n"
                + "  dep.idestatus, (SELECT UD.NO_USUARIO FROM USUARIOS_DEPARTAMENTO UD WHERE UD.IDDEPARTAMENTO = DEP.IDDEPARTAMENTO AND UD.NO_USUARIO= ? ) DEPUSUARIO "
                + "FROM departamento dep \n"
                + "where dep.idestatus=1 order by 1";
        System.out.println(query);
        try {
            listaDepartamento = new ArrayList<>();
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{us.getNoUsuario()}).executeQuery();

            while (rs.next()) {
                d = new Departamento();
                d.setIdDepartamento(rs.getInt("iddepartamento"));
                d.setNomDepto(rs.getString("nomdepto"));
                d.setIdUr(rs.getInt("idur"));
                d.setIdEstatus(rs.getInt("idestatus"));
                d.setDepartamentoSeleccionado(rs.getBoolean("DEPUSUARIO"));
                listaDepartamento.add(d);

            }
            System.out.println("listaDepartamento.size() = " + listaDepartamento.size());
        } catch (SQLException e) {
            System.out.println("Error en listaDepartamento() " + e.getMessage());
            listaDepartamento = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en listaDepartamento() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return listaDepartamento;
    }
    
    public Usuarios getUsuario(String clave) {
        Usuarios usuario = null;
        ResultSet rs = null;

        final String query = "SELECT NO_USUARIO "
                + " FROM USUARIOS where CLAVE = ? ";
        try {
            super.abrirConexion();
            rs = super.getPreparedStatement(query, new Object[]{clave}).executeQuery();
            while (rs.next()) {
                usuario = new Usuarios();
                usuario.setNoUsuario(rs.getInt("NO_USUARIO"));

            }
        } catch (SQLException e) {
            System.out.println("Error en usuario() " + e.getMessage());

            usuario = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en usuario() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return usuario;
    }
    
    public List<Usuarios> traeRegistrosUsuariosBusqueda(String valor) {
        List<Usuarios> listaUsuarios;
        System.out.println("Entro a cargar traeRegistrosUsuariosBusqueda");
        Usuarios persona = null;
        ResultSet rs = null;
        String query = null;
        query = "select ua.no_usuario as no_usuario, ua.CLAVE as usuario , ua.correo as correo, ua.nombre as nombre, \n"
                + "                  UA.APELLIDO_PATERNO AS APELLIDO_PATERNO, UA.APELLIDO_MATERNO AS APELLIDO_MATERNO, UA.TELEFONO AS TELEFONO, UA.TELEFONO2 AS TELEFONO2, \n"
                + "               (SELECT RU.NO_ROL FROM ROLES_USUARIOS RU WHERE RU.NO_USUARIO=UA.NO_USUARIO AND RU.IDESTATUS=1) AS rol,\n"
                + "               (SELECT RO.DESCRIPCION FROM ROLES_USUARIOS RU, ROLES RO\n"
                + "               WHERE RU.NO_USUARIO=UA.NO_USUARIO\n"
                + "               AND RO.NO_ROL=RU.NO_ROL\n"
                + "               \n"
                + "               AND RO.IDESTATUS =1 AND RU.IDESTATUS=1) AS nombreRol, UA.IDESTATUS, UA.NOPERSONALBM, \n"
                + "              (select PE.NOMBRE||' '||PE.AP1||' '||PE.AP2 from PERSONAL PE where PE.NOPERSONALBM = UA.NOPERSONALBM) NOMPERSONAL"
                + "               FROM USUARIOS UA\n"
                + " where (ua.nombre||' '||UA.APELLIDO_PATERNO||' '||UA.APELLIDO_MATERNO like '%" + valor + "%' OR ua.CLAVE like '%" + valor + "%') order by 1";
        System.out.println(query);
        try {
            listaUsuarios = new ArrayList<>();
            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();

            while (rs.next()) {
                persona = new Usuarios();
                persona.setNoUsuario(rs.getInt("no_usuario"));
                persona.setClave(rs.getString("usuario"));
                persona.setNombre(rs.getString("nombre"));
                persona.setApellidoPaterno(rs.getString("apellido_paterno"));
                persona.setApellidoMaterno(rs.getString("apellido_materno"));
                persona.setCorreo(rs.getString("correo"));
                persona.setTelefono(rs.getString("telefono"));
                persona.setTelefono2(rs.getString("telefono2"));
                persona.setNoRol(rs.getInt("rol"));
                String desc = "";
                if (rs.getString("nombreRol") != (null)) {
                    desc = rs.getString("nombreRol");
                } else {
                    desc = "SIN ROL";
                }
                persona.setDescripcionRol(desc);
                persona.setNomPersonal(rs.getString("NOMPERSONAL"));
                persona.setIdestatus(rs.getInt("IDESTATUS"));
                persona.setNoPersonalBm(rs.getInt("NOPERSONALBM"));
                listaUsuarios.add(persona);

            }
            System.out.println("traeRegistrosUsuariosBusqueda.size() = " + listaUsuarios.size());
        } catch (SQLException e) {
            System.out.println("Error en traeRegistrosUsuariosBusqueda() " + e.getMessage());
            listaUsuarios = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en traeRegistrosUsuariosBusqueda() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return listaUsuarios;
    }
  /*  
     public List<Personal> traeRegistrosPersonal() {
        List<Personal> listaPersonal;
        System.out.println("Entro a cargar la lista de registros personal");
        Personal per = null;
        ResultSet rs = null;
        String query = null;
        query = "select nopersonalbm, nopersonal, rfc, curp, ap1, ap2, nombre, idestatus from personal";

        try {
            listaPersonal = new ArrayList<>();
            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();

            while (rs.next()) {
                per = new Personal();
                per.setNoPersonalBm(rs.getInt("nopersonalbm"));
                per.setNoPersonal(rs.getInt("nopersonal"));
                per.setRfc(rs.getString("rfc"));
                per.setCurp(rs.getString("curp"));
                per.setAp1(rs.getString("ap1"));
                per.setAp2(rs.getString("ap2"));
                per.setNombre(rs.getString("nombre"));
                per.setIdestatus(rs.getInt("idestatus"));
                listaPersonal.add(per);

            }
            System.out.println("listaPersonal.size() = " + listaPersonal.size());
        } catch (SQLException e) {
            System.out.println("Error en listaPersonal() " + e.getMessage());
            listaPersonal = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en listaPersonal() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return listaPersonal;
    }
     
     public List<Personal> traeRegistrosPersonalBusqueda(String valor) {
        List<Personal> listaPersonal;
        System.out.println("Entro a cargar la lista de registros personal busqueda");
        Personal per = null;
        ResultSet rs = null;
        String query = null;
        query = "select nopersonalbm, "
                + "nopersonal, "
                + "rfc, "
                + "curp, "
                + "ap1, "
                + "ap2, "
                + "nombre, "
                + "idestatus "
                + "from personal "
                + " where (nombre||' '||ap1||' '||ap2 like '%"+valor+"%' OR rfc like '%"+valor+"%')";
         System.out.println(query);
        try {
            listaPersonal = new ArrayList<>();
            super.abrirConexion();
            rs = super.getPreparedStatement(query).executeQuery();

            while (rs.next()) {
                per = new Personal();
                per.setNoPersonalBm(rs.getInt("nopersonalbm"));
                per.setNoPersonal(rs.getInt("nopersonal"));
                per.setRfc(rs.getString("rfc"));
                per.setCurp(rs.getString("curp"));
                per.setAp1(rs.getString("ap1"));
                per.setAp2(rs.getString("ap2"));
                per.setNombre(rs.getString("nombre"));
                per.setIdestatus(rs.getInt("idestatus"));
                listaPersonal.add(per);

            }
            System.out.println("listaPersonalBusqueda.size() = " + listaPersonal.size());
        } catch (SQLException e) {
            System.out.println("Error en listaPersonalBusqueda() " + e.getMessage());
            listaPersonal = null;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.out.println("Error en listaPersonalBusqueda() " + e.getMessage());
            }
            super.cerrarConexion();
        }
        return listaPersonal;
    }
*/
}
