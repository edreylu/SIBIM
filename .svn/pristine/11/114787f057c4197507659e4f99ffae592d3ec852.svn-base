/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reportes;

import acceso.AccesoControl;
import conexion.ConexionOracle;
import departamento.Departamento;
import departamento.DepartamentoDAO;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import mobiliario.Mobiliario;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import org.apache.commons.io.IOUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Picture;
import org.apache.poi.ss.usermodel.Row;
import org.primefaces.PrimeFaces;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import utilerias.Mensaje;

/**
 *
 * @author usuario
 */
@ManagedBean(name = "reportesControl")
@SessionScoped
public class ReportesControl implements Serializable {

    @ManagedProperty(value = "#{accesoC}")
    private AccesoControl accesoC;
    private final ReportesDAO rdao;
    private final DepartamentoDAO depdao;
    private List<Reporte> reportes;
    private Reporte reporte;
    private Reporte reporteSeleccionado;
    private List<Reporte> filteredReporte;
    private List<Departamento> departamentos;
    private Date fecha;
    private int tipoReporte;
    public StreamedContent file;
    public String fechaReporte;
    private int dep;
    private final Mensaje msg = new Mensaje();

    private String filtroTipoSiere = "1";
    private Map<Integer, String> mapDeptosSiere = new HashMap<>();
    private Map<Integer, String> mapURSiere = new HashMap<>();
    private int deptoSiere;
    private int urSiere;
    private int bloque;
    List<Mobiliario> listaSiere;
    List<Integer> listBloques = new ArrayList<>();

    public ReportesControl() {
        rdao = new ReportesDAO();
        depdao = new DepartamentoDAO();
        reporte = new Reporte();
    }

    public void init() {
        reportes = rdao.traeRegistros(2);
        reporteSeleccionado = null;
        tipoReporte=0;
        mapDeptosSiere = rdao.obtenerDepartamentos();
    }

    public List<Reporte> getReportes() {
        return reportes;
    }

    public void setReportes(List<Reporte> reportes) {
        this.reportes = reportes;
    }

    public Reporte getReporte() {
        return reporte;
    }

    public void setReporte(Reporte reporte) {
        this.reporte = reporte;
    }

    public Reporte getReporteSeleccionado() {
        return reporteSeleccionado;
    }

    public void setReporteSeleccionado(Reporte reporteSeleccionado) {
        this.reporteSeleccionado = reporteSeleccionado;
    }

    public List<Reporte> getFilteredReporte() {
        return filteredReporte;
    }

    public void setFilteredReporte(List<Reporte> filteredReporte) {
        this.filteredReporte = filteredReporte;
    }

    public StreamedContent getFile() {
        return file;
    }

    public void setFile(StreamedContent file) {
        this.file = file;
    }

    public Date getFecha() {
        return fecha;
    }

    public void setFecha(Date fecha) {
        this.fecha = fecha;
    }

    public List<Departamento> getDepartamentos() {
        return departamentos;
    }

    public void setDepartamentos(List<Departamento> departamentos) {
        this.departamentos = departamentos;
    }

    public int getDep() {
        return dep;
    }

    public void setDep(int dep) {
        this.dep = dep;
    }

    public int getTipoReporte() {
        return tipoReporte;
    }

    public void setTipoReporte(int tipoReporte) {
        this.tipoReporte = tipoReporte;
    }

    public String getFechaReporte() {
        return fechaReporte;
    }

    public void setFechaReporte(String fechaReporte) {
        this.fechaReporte = fechaReporte;
    }

    public String getFiltroTipoSiere() {
        return filtroTipoSiere;
    }

    public void setFiltroTipoSiere(String filtroTipoSiere) {
        this.filtroTipoSiere = filtroTipoSiere;
    }

    public Map<Integer, String> getMapDeptosSiere() {
        return mapDeptosSiere;
    }

    public void setMapDeptosSiere(Map<Integer, String> mapDeptosSiere) {
        this.mapDeptosSiere = mapDeptosSiere;
    }

    public int getDeptoSiere() {
        return deptoSiere;
    }

    public void setDeptoSiere(int deptoSiere) {
        this.deptoSiere = deptoSiere;
    }

    public Map<Integer, String> getMapURSiere() {
        return mapURSiere;
    }

    public void setMapURSiere(Map<Integer, String> mapURSiere) {
        this.mapURSiere = mapURSiere;
    }

    public int getUrSiere() {
        return urSiere;
    }

    public void setUrSiere(int urSiere) {
        this.urSiere = urSiere;
    }

    public List<Mobiliario> getListaSiere() {
        return listaSiere;
    }

    public void setListaSiere(List<Mobiliario> listaSiere) {
        this.listaSiere = listaSiere;
    }

    public List<Integer> getListBloques() {
        return listBloques;
    }

    public void setListBloques(List<Integer> listBloques) {
        this.listBloques = listBloques;
    }

    public void CargaVentanaJasper() {
        departamentos = depdao.traeRegistrosDepartamentoMobiliario(accesoC.getNoUsuario());
        PrimeFaces.current().ajax().update(":formParametros");
        PrimeFaces.current().executeScript("PF('dlgparametros').show();");
    }

    public void CargaVentanaInserta(String ob) {

        filteredReporte = null;
        reporte = new Reporte();
        PrimeFaces.current().ajax().update(":formInsertar");
        PrimeFaces.current().executeScript("PF('dlginsertar').show();");
    }

    public void CargaVentanaModifica() {
        filteredReporte = null;
        PrimeFaces.current().ajax().update(":formModificar");
        PrimeFaces.current().executeScript("PF('dlgmodificar').show();");
    }

    public void insertar() {

        reporte.setIdReporte(rdao.getNumeroSiguiente());
        int valor = rdao.insertaReporte(reporte);
        if (valor == 1) {
            msg.info("Procesado..", "Registro guardado");
        } else {
            msg.warn("Error..", "No se guardo la informacion");
        }
        PrimeFaces.current().executeScript("PF('dlginsertar').hide();");
    }

    public void modificar() {
        int valor = 0;

        valor = rdao.actualizaReporte(reporte);
        if (valor == 1) {
            msg.info("Procesado..", "Registro actualizado");
        } else {
            msg.warn("Error", "No se actualizo la informacion");

        }

        PrimeFaces.current().executeScript("PF('dlgmodificar').hide();");
    }

    public void ActivarInactivar(int opcion) {

        System.out.println("valor: " + reporte.getIdReporte());
        String dato = opcion == 1 ? "activó" : "inactivó";
        int valor = rdao.eliminaReporte(reporte, opcion);
        if (valor == 1) {

            msg.info("Procesado..", "Registro se " + dato);
        } else {
            msg.warn("Error..", "No se " + dato + " el Registro");
        }
        PrimeFaces.current().executeScript("PF('dlgeliminar').hide();");
    }

    public void generar(int val) throws ParseException, FileNotFoundException {
        System.out.println("reportes.ReportesControl.generar()" + val);
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        if (fecha == null) {
            Date fechaActual = new Date();
            fecha = fechaActual;
        }
        fechaReporte = format.format(fecha);
        if (val == 1) {
            generaExcelSibim(reporteSeleccionado, fechaReporte, accesoC.getClave());
        } else if (val == 2) {
            generaReporteJasper(dep, fechaReporte);
        }
        fechaReporte = null;
        fecha = null;
        dep = 0;
    }
    
    
    public int getBloque() {
        return bloque;
    }

    public void setBloque(int bloque) {
        this.bloque = bloque;
    }

    public void cancelarActualizar() {
        PrimeFaces.current().executeScript("PF('dlgmodificar').hide();");
    }

    public void cancelarEliminar() {
        PrimeFaces.current().executeScript("PF('dlgeliminar').hide();");
    }

    //REPORTE SIBIM *******************************************************************
    public StreamedContent generaExcelSibim(Reporte reporte, String fecha, String usuario) {
        ResultSet cConsulta;
        int columna = 0;
        int fila = 7;
        ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
        String path = context.getRealPath("/");
        String Plantilla = path + "//resources//reportes//REPORTE_BM01.xls";
        String ruta = path + "//resources//reportes//reportesModulo//" + "REPORTE_BM01" + ".xls";
        String imagePath = path + "//resources//img//SEP.png";
        System.out.println("Ruta:" + ruta);
        try {

            POIFSFileSystem FS = new POIFSFileSystem(new FileInputStream(Plantilla));
            HSSFWorkbook WB = new HSSFWorkbook(FS);
            HSSFCellStyle style = WB.createCellStyle();
            HSSFCellStyle style2 = WB.createCellStyle();
            HSSFSheet Sheet = WB.getSheet("Hoja1");
            final FileInputStream stream = new FileInputStream(imagePath);
            final CreationHelper helper = WB.getCreationHelper();
            final Drawing drawing = Sheet.createDrawingPatriarch();
            final ClientAnchor anchor = helper.createClientAnchor();
            anchor.setAnchorType(ClientAnchor.AnchorType.MOVE_AND_RESIZE);
            final int pictureIndex = WB.addPicture(IOUtils.toByteArray(stream), WB.PICTURE_TYPE_PNG);
            anchor.setCol1(0);
            anchor.setRow1(0);
            anchor.setRow2(0);
            anchor.setCol2(0);
            final Picture pict = drawing.createPicture(anchor, pictureIndex);
            double pors = 1.5;
            pict.resize(pors, 3);
            HSSFRow loFila;
            HSSFCell loCell;
            for (int i = 0; i < 5; i++) {
                loFila = Sheet.getRow(i);
                if (loFila == null) {
                    loFila = Sheet.createRow(i);
                }
                loCell = loFila.getCell((short) 0);
                if (loCell == null) {
                    loCell = loFila.createCell((short) 0);
                }
                style2.setAlignment(HorizontalAlignment.CENTER);
                Font font1 = WB.createFont();
                font1.setBold(true);
                style2.setFont(font1);
                loCell.setCellStyle(style2);
                String titulo = "";
                switch (i) {
                    case 0:
                        titulo = reporte.getTitulo1();
                        break;
                    case 1:
                        titulo = reporte.getTitulo2();
                        break;
                    case 2:
                        titulo = reporte.getTitulo3();
                        break;
                    case 3:
                        titulo = reporte.getTitulo4();
                        break;
                    case 4:
                        titulo = reporte.getTitulo5();
                        break;
                }
                loCell.setCellValue(titulo);
            }

            cConsulta = rdao.getConsulta(reporte.getQuery());
            ResultSetMetaData MetaData = cConsulta.getMetaData();

            loFila = Sheet.getRow(fila);
            if (loFila == null) {
                loFila = Sheet.createRow(fila);
            }
            for (columna = 0; columna < MetaData.getColumnCount(); columna++) {
                HSSFCell celda = loFila.getCell((short) columna);
                if (celda == null) {
                    celda = loFila.createCell((short) columna);
                }
                style.setFillForegroundColor(HSSFColor.HSSFColorPredefined.GREY_25_PERCENT.getIndex());
                style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                celda.setCellValue(MetaData.getColumnName(columna + 1));
                celda.setCellStyle(style);
            }

            while (cConsulta.next()) {
                fila++;
                loFila = Sheet.getRow(fila);
                if (loFila == null) {
                    loFila = Sheet.createRow(fila);
                }

                for (columna = 0; columna < MetaData.getColumnCount(); columna++) {
                    HSSFCell celda = loFila.getCell((short) columna);
                    if (celda == null) {
                        celda = loFila.createCell((short) columna);
                    }
                    if (MetaData.getColumnTypeName(columna + 1).toUpperCase().equals("DATE")) {
                        if (cConsulta.getDate(columna + 1) != null) {
                            celda.setCellValue(cConsulta.getDate(columna + 1));
                        } else {
                            celda.setCellValue("");
                        }
                    } else if ((MetaData.getColumnTypeName(columna + 1).toUpperCase().equals("INTEGER"))
                            || (MetaData.getColumnTypeName(columna + 1).toUpperCase().equals("NUMBER"))
                            || (MetaData.getColumnTypeName(columna + 1).toUpperCase().equals("DECIMAL"))) {
                        if (cConsulta.getString(columna + 1) != null) {
                            celda.setCellValue(cConsulta.getDouble(columna + 1));
                        }
                    } else {
                        celda.setCellValue(cConsulta.getString(columna + 1));
                    }
                }
            }
            //DATOS REPORTE*********************************************
            loFila = Sheet.getRow(6);
            if (loFila == null) {
                loFila = Sheet.createRow(6);
            }
            loCell = loFila.getCell((short) 0);
            if (loCell == null) {
                loFila.createCell((short) 0);
            }
            loCell.setCellStyle(style2);
            loCell.setCellValue("USUARIO: " + usuario);
            loFila = Sheet.getRow(6);
            if (loFila == null) {
                loFila = Sheet.createRow(6);
            }
            loCell = loFila.getCell((short) 7);
            if (loCell == null) {
                loFila.createCell((short) 7);
            }
            loCell.setCellStyle(style2);
            loCell.setCellValue("FECHA: " + fecha);
            loFila = Sheet.getRow(6);
            if (loFila == null) {
                loFila = Sheet.createRow(6);
            }
            loCell = loFila.getCell((short) 8);
            if (loCell == null) {
                loFila.createCell((short) 8);
            }
            loCell.setCellStyle(style2);
            loCell.setCellValue("TOTAL DE BIENES: " + (fila - 7));
            //*********************************************

            cConsulta.close();
            FileOutputStream fos = null;
            String rutaArchivoNuevo = ruta;
            File archivoNuevo = new File(rutaArchivoNuevo);
            if (archivoNuevo.exists()) {
                archivoNuevo.delete();
            } else {
                archivoNuevo.createNewFile();
            }
            fos = new FileOutputStream(archivoNuevo);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            WB.write(bos);
            bos.flush();

            String nombreArchivo = archivoNuevo.getName();
            String tipoContenido = "application/vnd.ms-excel";
            InputStream inputS = new FileInputStream(rutaArchivoNuevo);
            file = new DefaultStreamedContent(inputS, tipoContenido, nombreArchivo);
            System.out.println("Descarga correcta");
        } catch (Exception ex) {
            System.out.println("\n Se ha producido un error \n" + ex.getMessage());
        }
        rdao.cerrarConexion();
        return file;
    }

    //REPORTE GENERAL ***********************************************************
    public StreamedContent generaExcelReporte(String consulta, String tituloReporte, String nombreReporte, String noUsuario) {
        ResultSet cConsulta;
        int columna = 0;
        int fila = 7;
        ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
        String path = context.getRealPath("/");
        String Plantilla = path + "//resources//reportes//REPORTE_GEN.xls";
        String ruta = path + "//resources//reportes//reportesModulo//" + nombreReporte + ".xls";
        String imagePath = path + "//resources//img//SEP.png";
        System.out.println("Ruta:" + ruta);
        try {

            POIFSFileSystem FS = new POIFSFileSystem(new FileInputStream(Plantilla));
            HSSFWorkbook WB = new HSSFWorkbook(FS);
            HSSFCellStyle style = WB.createCellStyle();
            HSSFCellStyle style2 = WB.createCellStyle();
            HSSFSheet Sheet = WB.getSheet("Hoja1");
            final FileInputStream stream = new FileInputStream(imagePath);
            final CreationHelper helper = WB.getCreationHelper();
            final Drawing drawing = Sheet.createDrawingPatriarch();
            final ClientAnchor anchor = helper.createClientAnchor();
            anchor.setAnchorType(ClientAnchor.AnchorType.MOVE_AND_RESIZE);
            final int pictureIndex = WB.addPicture(IOUtils.toByteArray(stream), WB.PICTURE_TYPE_PNG);
            anchor.setCol1(0);
            anchor.setRow1(0);
            anchor.setRow2(0);
            anchor.setCol2(0);
            final Picture pict = drawing.createPicture(anchor, pictureIndex);
            double pors = 1.5;
            pict.resize(pors, 3);
            HSSFRow loFila = Sheet.getRow(fila - 2);
            if (loFila == null) {
                loFila = Sheet.createRow(fila - 2);
            }
            HSSFCell loCell = loFila.getCell((short) 0);
            if (loCell == null) {
                loCell = loFila.createCell((short) 0);
            }
            style2.setAlignment(HorizontalAlignment.CENTER);
            loCell.setCellStyle(style2);
            loCell.setCellValue(tituloReporte);

            loFila = Sheet.getRow(fila - 1);
            if (loFila == null) {
                loFila = Sheet.createRow(fila - 1);
            }
            loCell = loFila.getCell((short) 0);
            if (loCell == null) {
                loFila.createCell((short) 0);
            }
            loCell.setCellStyle(style2);
            loCell.setCellValue("USUARIO: " + noUsuario);
            cConsulta = rdao.getConsulta(consulta);
            ResultSetMetaData MetaData = cConsulta.getMetaData();

            loFila = Sheet.getRow(fila);
            if (loFila == null) {
                loFila = Sheet.createRow(fila);
            }
            for (columna = 0; columna < MetaData.getColumnCount(); columna++) {
                HSSFCell celda = loFila.getCell((short) columna);
                if (celda == null) {
                    celda = loFila.createCell((short) columna);
                }
                style.setFillForegroundColor(HSSFColor.HSSFColorPredefined.GREY_25_PERCENT.getIndex());
                style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                celda.setCellValue(MetaData.getColumnName(columna + 1));
                celda.setCellStyle(style);
            }

            fila++;

            while (cConsulta.next()) {
                loFila = Sheet.getRow(fila);
                if (loFila == null) {
                    loFila = Sheet.createRow(fila);
                }

                for (columna = 0; columna < MetaData.getColumnCount(); columna++) {
                    HSSFCell celda = loFila.getCell((short) columna);
                    if (celda == null) {
                        celda = loFila.createCell((short) columna);
                    }
                    if (MetaData.getColumnTypeName(columna + 1).toUpperCase().equals("DATE")) {
                        if (cConsulta.getDate(columna + 1) != null) {
                            celda.setCellValue(cConsulta.getDate(columna + 1));
                        } else {
                            celda.setCellValue("");
                        }
                    } else if ((MetaData.getColumnTypeName(columna + 1).toUpperCase().equals("INTEGER"))
                            || (MetaData.getColumnTypeName(columna + 1).toUpperCase().equals("NUMBER"))
                            || (MetaData.getColumnTypeName(columna + 1).toUpperCase().equals("DECIMAL"))) {
                        if (cConsulta.getString(columna + 1) != null) {
                            celda.setCellValue(cConsulta.getDouble(columna + 1));
                        }
                    } else {
                        celda.setCellValue(cConsulta.getString(columna + 1));
                    }
                }
                fila++;
            }
            cConsulta.close();
            FileOutputStream fos = null;
            String rutaArchivoNuevo = ruta;
            File archivoNuevo = new File(rutaArchivoNuevo);
            if (archivoNuevo.exists()) {
                archivoNuevo.delete();
            } else {
                archivoNuevo.createNewFile();
            }
            fos = new FileOutputStream(archivoNuevo);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            WB.write(bos);
            bos.flush();

            String nombreArchivo = archivoNuevo.getName();
            String tipoContenido = "application/vnd.ms-excel";
            InputStream inputS = new FileInputStream(rutaArchivoNuevo);
            file = new DefaultStreamedContent(inputS, tipoContenido, nombreArchivo);
            System.out.println("Descarga correcta");
        } catch (Exception ex) {
            System.out.println("\n Se ha producido un error \n" + ex.getMessage());
        }
        rdao.cerrarConexion();
        return file;
    }

    public StreamedContent generaReporteJasper(int idDepartamento, String fecha) throws FileNotFoundException {
        JasperReport reporte;
        JasperPrint reporte_view;
        Connection Conn = null;
        idDepartamento = idDepartamento == 0 ? 1 : idDepartamento;
        ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
        String path = context.getRealPath("/");

        //path para tomcat
        String realPath = path + "//resources//reportes//SIBIM//SIBIM.jasper";
        String subreport = path + "//resources//reportes//SIBIM//";
        String imagenes = path + "//resources//img//";
        String archivopdf = path + "//resources//reportes//SIBIM//SIBIEM.pdf";
        System.out.println("VALOR DE DEPARTAMENTO" + idDepartamento);
        System.out.println("path: " + realPath);
        try {

            ConexionOracle Connexion = new ConexionOracle();
            Connexion.abrirConexion();
            Conn = Connexion.getConn();

            File jasper = new File(realPath);
            reporte = (JasperReport) JRLoader.loadObject(jasper);
            Map<String, Object> parametros = new HashMap<>();
            parametros.clear();
            parametros.put("IDDEPARTAMENTO", idDepartamento);
            parametros.put("SUBREPORT_DIR", subreport);
            parametros.put("FECHA", fecha);
            parametros.put("urlImgs", imagenes);
            //-----------------------------------
            System.out.println("parametros: " + parametros);
            reporte_view = JasperFillManager.fillReport(reporte, parametros, Conn);
            JasperExportManager.exportReportToPdfFile(reporte_view, archivopdf);
            String nombreArchivo = "SIBIEM.pdf";
            String tipoContenido = "application/pdf";
            InputStream inputS = new FileInputStream(archivopdf);
            file = new DefaultStreamedContent(inputS, tipoContenido, nombreArchivo);
            Conn.close();
        } catch (JRException | SQLException E) {
        } finally {
        }
        return file;
    }

    public String formatoFecha(String fecha) throws ParseException {
        DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy", Locale.ENGLISH);
        Date date = formatter.parse(fecha);
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        String resultado = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.YEAR);
        return resultado;
    }

    public AccesoControl getAccesoC() {
        return accesoC;
    }

    public void setAccesoC(AccesoControl accesoC) {
        this.accesoC = accesoC;
    }
    
    public void cargaInfoporTipoReporte() {
        fecha=null;
        if(tipoReporte==1){reporteSeleccionado=rdao.traeReporte(1);}
        if(tipoReporte==2){departamentos = depdao.traeRegistrosDepartamentoMobiliario(accesoC.getNoUsuario());}
    }

    public void cargaInfoporFiltro() {
        switch (filtroTipoSiere) {
            case "1":
                if (mapDeptosSiere.isEmpty()) {
                    mapDeptosSiere = rdao.obtenerDepartamentos();
                }
                break;
            case "2":
                if (mapURSiere.isEmpty()) {
                    mapURSiere = rdao.obtenerURs();
                }
                break;
            case "3":
                if (listBloques.isEmpty()) {
                    listBloques.add(1);
                    listBloques.add(2);
                    listBloques.add(3);
                    listBloques.add(4);
                }
                break;

        }
    }

    public void cargaInfoSiere() {
        listaSiere = new ArrayList();
        int dato = 0;
        if ("1".equals(filtroTipoSiere)) {
            dato = deptoSiere;
            urSiere = 0;
            bloque = 0;
        } else if ("2".equals(filtroTipoSiere)) {
            dato = urSiere;
            deptoSiere = 0;
            bloque = 0;
        } else {
            dato = bloque;
            deptoSiere = 0;
            urSiere = 0;
        }

        listaSiere = rdao.traeSiere(dato, Integer.parseInt(filtroTipoSiere));
        System.out.println("Tamaño lista: " + listaSiere.size());

    }

    public StreamedContent generaExcelSiere() {
        List<Mobiliario> lanexoV2 = new ArrayList();
        List<Mobiliario> lanexoV18 = new ArrayList();
        List<Mobiliario> lanexoV6 = new ArrayList();
        List<Mobiliario> lanexoV4 = new ArrayList();
        List<Mobiliario> lanexoV1 = new ArrayList();

        int columna = 0;

        int fila = 7;

        ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
        String path = context.getRealPath("/");
        String Plantilla = path + "//resources//reportes//REPORTE_GEN.xls";
        String tipo = "";
        String nombre = "";
        switch (filtroTipoSiere) {
            case "1":
                tipo = "DEPTO_";
                nombre = mapDeptosSiere.get(deptoSiere);
                break;
            case "2":
                tipo = "UR_";
                nombre = mapURSiere.get(urSiere);
                break;
            case "3":
                tipo = "BLOQUE_";
                nombre = String.valueOf(bloque);
                break;
        }

        String ruta = path + "//resources//reportes//reportesModulo//" + "SIERE_" + tipo + nombre + ".xls";
        String imagePath = path + "//resources//img//SEP.png";
        System.out.println("Ruta:" + ruta);

        for (Mobiliario mob : listaSiere) {
            switch (mob.getAnexo()) {
                case "ANEXO V2":
                    lanexoV2.add(mob);
                    break;
                case "ANEXO V18":
                    lanexoV18.add(mob);
                    break;
                case "ANEXO V6":
                    lanexoV6.add(mob);
                    break;
                case "ANEXO V4":
                    lanexoV4.add(mob);
                    break;
                case "ANEXO V1":
                    lanexoV1.add(mob);
                    break;
            }
        }
        try {

            POIFSFileSystem FS = new POIFSFileSystem(new FileInputStream(Plantilla));
            HSSFWorkbook WB = new HSSFWorkbook(FS);
            HSSFCellStyle style = WB.createCellStyle();
            HSSFCellStyle style2 = WB.createCellStyle();
            HSSFSheet Sheet = WB.getSheet("Hoja1");
            final FileInputStream stream = new FileInputStream(imagePath);
            final CreationHelper helper = WB.getCreationHelper();
            final Drawing drawing = Sheet.createDrawingPatriarch();
            final ClientAnchor anchor = helper.createClientAnchor();
            anchor.setAnchorType(ClientAnchor.AnchorType.MOVE_AND_RESIZE);
            final int pictureIndex = WB.addPicture(IOUtils.toByteArray(stream), WB.PICTURE_TYPE_PNG);
            anchor.setCol1(0);
            anchor.setRow1(0);
            anchor.setRow2(0);
            anchor.setCol2(0);
            final Picture pict = drawing.createPicture(anchor, pictureIndex);
            double pors = 1.5;
            pict.resize(pors, 3);
            HSSFRow loFila = Sheet.getRow(fila - 2);
            if (loFila == null) {
                loFila = Sheet.createRow(fila - 2);
            }
            HSSFCell loCell = loFila.getCell((short) 0);
            if (loCell == null) {
                loCell = loFila.createCell((short) 0);
            }
            style2.setAlignment(HorizontalAlignment.CENTER);
            loCell.setCellValue("Reporte SIERE");

            HSSFFont font = WB.createFont();
            font.setBold(true);

            style2.setFont(font);
            loCell.setCellStyle(style2);

            loFila = Sheet.getRow(fila - 1);
            if (loFila == null) {
                loFila = Sheet.createRow(fila - 1);
            }
            loCell = loFila.getCell((short) 0);
            if (loCell == null) {
                loFila.createCell((short) 0);
            }
            loCell.setCellStyle(style2);

            Cell cellColumna;
            Row rowCabecera;
            int rownum;

            /**
             * ***********ANEXO V1****************
             */
            rowCabecera = Sheet.createRow(7);

            cellColumna = rowCabecera.createCell(0);
            cellColumna.setCellValue("Descripción");
            cellColumna = rowCabecera.createCell(1);
            cellColumna.setCellValue("Marca");
            cellColumna = rowCabecera.createCell(2);
            cellColumna.setCellValue("Número de serie");
            cellColumna = rowCabecera.createCell(3);
            cellColumna.setCellValue("Estado Físico");
            cellColumna = rowCabecera.createCell(4);
            cellColumna.setCellValue("IME/Número de Inventario");
            cellColumna = rowCabecera.createCell(5);
            cellColumna.setCellValue("COG");
            cellColumna = rowCabecera.createCell(6);
            cellColumna.setCellValue("Observaciones");
            cellColumna = rowCabecera.createCell(7);
            cellColumna.setCellValue("BLOQUE");
            cellColumna = rowCabecera.createCell(8);
            cellColumna.setCellValue("UNIDAD RESPONSABLE");
            cellColumna = rowCabecera.createCell(9);
            cellColumna.setCellValue("DEPARTAMENTO");

            for (int i = 0; i < rowCabecera.getLastCellNum(); i++) {
                rowCabecera.getCell(i).setCellStyle(style2);
            }

            WB.setSheetName(0, "ANEXO V1");
            rownum = 8;

            for (Mobiliario mob : lanexoV1) {
                Row row = Sheet.createRow(rownum++);
                Cell cell = row.createCell(0);
                cell.setCellValue(mob.getClasificador());

                cell = row.createCell(1);
                cell.setCellValue(mob.getMarca());

                cell = row.createCell(2);
                cell.setCellValue(mob.getSerie());

                cell = row.createCell(3);
                cell.setCellValue(mob.getEstadoDelBien());

                cell = row.createCell(4);
                cell.setCellValue(mob.getIme());

                cell = row.createCell(5);
                cell.setCellValue(mob.getClasificadorOg());

                cell = row.createCell(6);
                cell.setCellValue(mob.getObservaciones());

                cell = row.createCell(7);
                cell.setCellValue(mob.getBloque());
                
                cell = row.createCell(8);
                cell.setCellValue(mob.getNombreUR());
                
                cell = row.createCell(9);
                cell.setCellValue(mob.getDepartamento());
            }

            /**
             * ***********ANEXO V2****************
             */
            Sheet = WB.createSheet("ANEXO V2");

            rowCabecera = Sheet.createRow(0);

            cellColumna = rowCabecera.createCell(0);
            cellColumna.setCellValue("Descripción");
            cellColumna = rowCabecera.createCell(1);
            cellColumna.setCellValue("Marca");
            cellColumna = rowCabecera.createCell(2);
            cellColumna.setCellValue("Número de serie");
            cellColumna = rowCabecera.createCell(3);
            cellColumna.setCellValue("Estado Físico");
            cellColumna = rowCabecera.createCell(4);
            cellColumna.setCellValue("Cheque");
            cellColumna = rowCabecera.createCell(5);
            cellColumna.setCellValue("Número de factura");
            cellColumna = rowCabecera.createCell(6);
            cellColumna.setCellValue("Proveedor");
            cellColumna = rowCabecera.createCell(7);
            cellColumna.setCellValue("Costo");
            cellColumna = rowCabecera.createCell(8);
            cellColumna.setCellValue("IME/Número de Inventario");
            cellColumna = rowCabecera.createCell(9);
            cellColumna.setCellValue("COG");
            cellColumna = rowCabecera.createCell(10);
            cellColumna.setCellValue("Capacidad en Disco Duro");
            cellColumna = rowCabecera.createCell(11);
            cellColumna.setCellValue("Capacidad RAM");
            cellColumna = rowCabecera.createCell(12);
            cellColumna.setCellValue("OBSERVACIONES");
            cellColumna = rowCabecera.createCell(13);
            cellColumna.setCellValue("BLOQUE");
            cellColumna = rowCabecera.createCell(14);
            cellColumna.setCellValue("UNIDAD RESPONSABLE");
            cellColumna = rowCabecera.createCell(15);
            cellColumna.setCellValue("DEPARTAMENTO");

            for (int i = 0; i < rowCabecera.getLastCellNum(); i++) {
                rowCabecera.getCell(i).setCellStyle(style2);
            }

            rownum = 1;

            for (Mobiliario mob : lanexoV2) {
                Row row = Sheet.createRow(rownum++);
                Cell cell = row.createCell(0);
                cell.setCellValue(mob.getClasificador());

                cell = row.createCell(1);
                cell.setCellValue(mob.getMarca());

                cell = row.createCell(2);
                cell.setCellValue(mob.getSerie());

                cell = row.createCell(3);
                cell.setCellValue(mob.getEstadoDelBien());

                cell = row.createCell(4);
                cell.setCellValue(mob.getNumCheque());

                cell = row.createCell(5);
                cell.setCellValue(mob.getNumFactura());

                cell = row.createCell(6);
                cell.setCellValue(mob.getNombreProveedor());

                cell = row.createCell(7);
                cell.setCellValue(mob.getCostoTotal());

                cell = row.createCell(8);
                cell.setCellValue(mob.getIme());

                cell = row.createCell(9);
                cell.setCellValue(mob.getClasificadorOg());

                cell = row.createCell(10);
                cell.setCellValue("");

                cell = row.createCell(11);
                cell.setCellValue("");

                cell = row.createCell(12);
                cell.setCellValue(mob.getObservaciones());
                
                cell = row.createCell(13);
                cell.setCellValue(mob.getBloque());
                
                cell = row.createCell(14);
                cell.setCellValue(mob.getNombreUR());
                
                cell = row.createCell(15);
                cell.setCellValue(mob.getDepartamento());

            }

            /**
             * ***********ANEXO V18****************
             */
            Sheet = WB.createSheet("ANEXO V18");

            rowCabecera = Sheet.createRow(0);

            cellColumna = rowCabecera.createCell(0);
            cellColumna.setCellValue("IME/Número de Inventario");
            cellColumna = rowCabecera.createCell(1);
            cellColumna.setCellValue("Número de factura");
            cellColumna = rowCabecera.createCell(2);
            cellColumna.setCellValue("Fecha de Factura");
            cellColumna = rowCabecera.createCell(3);
            cellColumna.setCellValue("Concepto");
            cellColumna = rowCabecera.createCell(4);
            cellColumna.setCellValue("Importe");
            cellColumna = rowCabecera.createCell(5);
            cellColumna.setCellValue("Tipo");
            cellColumna = rowCabecera.createCell(6);
            cellColumna.setCellValue("COG");
            cellColumna = rowCabecera.createCell(7);
            cellColumna.setCellValue("BLOQUE");
            cellColumna = rowCabecera.createCell(8);
            cellColumna.setCellValue("UNIDAD RESPONSABLE");
            cellColumna = rowCabecera.createCell(9);
            cellColumna.setCellValue("DEPARTAMENTO");

            for (int i = 0; i < rowCabecera.getLastCellNum(); i++) {
                rowCabecera.getCell(i).setCellStyle(style2);
            }

            rownum = 1;

            for (Mobiliario mob : lanexoV18) {
                Row row = Sheet.createRow(rownum++);

                Cell cell = row.createCell(0);
                cell.setCellValue(mob.getIme());

                cell = row.createCell(1);
                cell.setCellValue(mob.getNumFactura());

                cell = row.createCell(2);
                cell.setCellValue(mob.getFechaFactura() != null ? mob.getFechaFactura().toString() : "");

                cell = row.createCell(3);
                cell.setCellValue(mob.getClasificador());

                cell = row.createCell(4);
                cell.setCellValue(mob.getCostoTotal());

                cell = row.createCell(5);
                cell.setCellValue("");

                cell = row.createCell(6);
                cell.setCellValue(mob.getClasificadorOg());
                
                cell = row.createCell(7);
                cell.setCellValue(mob.getBloque());
                
                cell = row.createCell(8);
                cell.setCellValue(mob.getNombreUR());
                
                cell = row.createCell(9);
                cell.setCellValue(mob.getDepartamento());

            }

            /**
             * ***********ANEXO V6****************
             */
            Sheet = WB.createSheet("ANEXO V6");

            rowCabecera = Sheet.createRow(0);

            cellColumna = rowCabecera.createCell(0);
            cellColumna.setCellValue("Clave Inventario");
            cellColumna = rowCabecera.createCell(1);
            cellColumna.setCellValue("Número de factura");
            cellColumna = rowCabecera.createCell(2);
            cellColumna.setCellValue("Fecha de Factura");
            cellColumna = rowCabecera.createCell(3);
            cellColumna.setCellValue("Concepto");
            cellColumna = rowCabecera.createCell(4);
            cellColumna.setCellValue("Importe");
            cellColumna = rowCabecera.createCell(5);
            cellColumna.setCellValue("Tipo");
            cellColumna = rowCabecera.createCell(6);
            cellColumna.setCellValue("Consideraciones");
            cellColumna = rowCabecera.createCell(7);
            cellColumna.setCellValue("BLOQUE");
            cellColumna = rowCabecera.createCell(8);
            cellColumna.setCellValue("UNIDAD RESPONSABLE");
            cellColumna = rowCabecera.createCell(9);
            cellColumna.setCellValue("DEPARTAMENTO");

            for (int i = 0; i < rowCabecera.getLastCellNum(); i++) {
                rowCabecera.getCell(i).setCellStyle(style2);
            }

            rownum = 1;

            for (Mobiliario mob : lanexoV6) {
                Row row = Sheet.createRow(rownum++);

                Cell cell = row.createCell(0);
                cell.setCellValue(mob.getIme());

                cell = row.createCell(1);
                cell.setCellValue(mob.getNumFactura());

                cell = row.createCell(2);
                cell.setCellValue(mob.getFechaFactura() != null ? mob.getFechaFactura().toString() : "");

                cell = row.createCell(3);
                cell.setCellValue(mob.getClasificador());

                cell = row.createCell(4);
                cell.setCellValue(mob.getCostoTotal());

                cell = row.createCell(5);
                cell.setCellValue("");

                cell = row.createCell(6);
                cell.setCellValue(mob.getObservaciones());
                
                cell = row.createCell(7);
                cell.setCellValue(mob.getBloque());
                
                cell = row.createCell(8);
                cell.setCellValue(mob.getNombreUR());
                
                cell = row.createCell(9);
                cell.setCellValue(mob.getDepartamento());

            }

            /**
             * ***********ANEXO V4****************
             */
            Sheet = WB.createSheet("ANEXO V4");

            rowCabecera = Sheet.createRow(0);

            cellColumna = rowCabecera.createCell(0);
            cellColumna.setCellValue("Software");
            cellColumna = rowCabecera.createCell(1);
            cellColumna.setCellValue("Marca");
            cellColumna = rowCabecera.createCell(2);
            cellColumna.setCellValue("Versión");
            cellColumna = rowCabecera.createCell(3);
            cellColumna.setCellValue("Licencia");
            cellColumna = rowCabecera.createCell(4);
            cellColumna.setCellValue("Número de licencias");
            cellColumna = rowCabecera.createCell(5);
            cellColumna.setCellValue("Discos");
            cellColumna = rowCabecera.createCell(6);
            cellColumna.setCellValue("Manuales");
            cellColumna = rowCabecera.createCell(7);
            cellColumna.setCellValue("Vigencia");
            cellColumna = rowCabecera.createCell(8);
            cellColumna.setCellValue("BLOQUE");
            cellColumna = rowCabecera.createCell(9);
            cellColumna.setCellValue("UNIDAD RESPONSABLE");
            cellColumna = rowCabecera.createCell(10);
            cellColumna.setCellValue("DEPARTAMENTO");

            for (int i = 0; i < rowCabecera.getLastCellNum(); i++) {
                rowCabecera.getCell(i).setCellStyle(style2);
            }

            rownum = 1;

            for (Mobiliario mob : lanexoV4) {
                Row row = Sheet.createRow(rownum++);

                Cell cell = row.createCell(0);
                cell.setCellValue(mob.getClasificador());

                cell = row.createCell(1);
                cell.setCellValue(mob.getMarca());

                cell = row.createCell(2);
                cell.setCellValue("");

                cell = row.createCell(3);
                cell.setCellValue("");

                cell = row.createCell(4);
                cell.setCellValue("");

                cell = row.createCell(5);
                cell.setCellValue("");

                cell = row.createCell(6);
                cell.setCellValue("");

                cell = row.createCell(7);
                cell.setCellValue("");
                
                cell = row.createCell(8);
                cell.setCellValue(mob.getBloque());
                
                cell = row.createCell(9);
                cell.setCellValue(mob.getNombreUR());
                
                cell = row.createCell(10);
                cell.setCellValue(mob.getDepartamento());

            }

            FileOutputStream fos = null;
            String rutaArchivoNuevo = ruta;
            File archivoNuevo = new File(rutaArchivoNuevo);
            if (archivoNuevo.exists()) {
                archivoNuevo.delete();
            } else {
                archivoNuevo.createNewFile();
            }

            fos = new FileOutputStream(archivoNuevo);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            WB.write(bos);
            bos.flush();

            String nombreArchivo = archivoNuevo.getName();
            String tipoContenido = "application/vnd.ms-excel";
            InputStream inputS = new FileInputStream(rutaArchivoNuevo);
            file = new DefaultStreamedContent(inputS, tipoContenido, nombreArchivo);

            System.out.println("Descarga correcta");

        } catch (Exception ex) {
            System.out.println("\n Se ha producido un error \n" + ex.getMessage());
        }

        rdao.cerrarConexion();
        return file;
    }

}
