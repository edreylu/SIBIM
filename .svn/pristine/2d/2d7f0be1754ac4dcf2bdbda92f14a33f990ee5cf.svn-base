/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bitacora;

import acceso.AccesoControl;
import departamento.Departamento;
import departamento.DepartamentoDAO;
import java.io.FileNotFoundException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.event.AbortProcessingException;
import javax.faces.event.ValueChangeEvent;
import mobiliario.Mobiliario;
import mobiliario.MobiliarioDAO;
import org.primefaces.PrimeFaces;
import org.primefaces.model.StreamedContent;
import personal.Personal;
import personal.PersonalDAO;
import reportes.ReportesControl;
import utilerias.Mensaje;

@ManagedBean(name = "bitacoraControl")
@SessionScoped
public class BitacoraControl implements java.io.Serializable {
    @ManagedProperty(value = "#{accesoC}")
    private AccesoControl accesoC;
    private final BitacoraDAO bitdao;
    private final PersonalDAO pdao;
    private final MobiliarioDAO modao;
    private final DepartamentoDAO depdao;
    private List<Bitacora> bitacoras;
    private Bitacora bitacora;
    private Bitacora bitacoraSeleccionada;
    private List<Bitacora> filteredBitacora;
    private List<Mobiliario> mobiliarios;
    private List<Mobiliario> filteredMobiliario;
    private List<Mobiliario> mobiliariosSeleccionados;
    private List<Personal> personal;
    private List<Departamento> departamentos;
    private String valorBuscado;
    private int dep;
    private String nomDep;
    private Date fecha;
    private Integer noPersonalBm;
    private String nomPersonal;
    private int radioSelect;
    public StreamedContent file;
    private final Mensaje msg = new Mensaje();

    public BitacoraControl() {
        bitdao = new BitacoraDAO();
        pdao = new PersonalDAO();
        modao = new MobiliarioDAO();
        depdao = new DepartamentoDAO();
        bitacora = new Bitacora();
    }

    public void init(int noDep) {
        radioSelect=0;
        mobiliarios = null;
    }

    public List<Bitacora> getBitacoras() {
        return bitacoras;
    }

    public void setBitacoras(List<Bitacora> bitacoras) {
        this.bitacoras = bitacoras;
    }

    public Bitacora getBitacora() {
        return bitacora;
    }

    public void setBitacora(Bitacora bitacora) {
        this.bitacora = bitacora;
    }

    public Bitacora getBitacoraSeleccionada() {
        return bitacoraSeleccionada;
    }

    public void setBitacoraSeleccionada(Bitacora bitacoraSeleccionada) {
        this.bitacoraSeleccionada = bitacoraSeleccionada;
    }

    public List<Mobiliario> getMobiliariosSeleccionados() {
        return mobiliariosSeleccionados;
    }

    public void setMobiliariosSeleccionados(List<Mobiliario> mobiliariosSeleccionados) {
        this.mobiliariosSeleccionados = mobiliariosSeleccionados;
    }

    public List<Bitacora> getFilteredBitacora() {
        return filteredBitacora;
    }

    public void setFilteredBitacora(List<Bitacora> filteredBitacora) {
        this.filteredBitacora = filteredBitacora;
    }

    public List<Personal> getPersonal() {
        return personal;
    }

    public void setPersonal(List<Personal> personal) {
        this.personal = personal;
    }

    public List<Departamento> getDepartamentos() {
        return departamentos;
    }

    public void setDepartamentos(List<Departamento> departamentos) {
        this.departamentos = departamentos;
    }

    public List<Mobiliario> getMobiliarios() {
        return mobiliarios;
    }

    public void setMobiliarios(List<Mobiliario> mobiliarios) {
        this.mobiliarios = mobiliarios;
    }

    public List<Mobiliario> getFilteredMobiliario() {
        return filteredMobiliario;
    }

    public void setFilteredMobiliario(List<Mobiliario> filteredMobiliario) {
        this.filteredMobiliario = filteredMobiliario;
    }
    
    public int getDep() {
        return dep;
    }

    public void setDep(int dep) {
        this.dep = dep;
    }

    public String getNomDep() {
        return nomDep;
    }

    public void setNomDep(String nomDep) {
        this.nomDep = nomDep;
    }

    public Integer getNoPersonalBm() {
        return noPersonalBm;
    }

    public void setNoPersonalBm(Integer noPersonalBm) {
        this.noPersonalBm = noPersonalBm;
    }

    public String getNomPersonal() {
        return nomPersonal;
    }

    public void setNomPersonal(String nomPersonal) {
        this.nomPersonal = nomPersonal;
    }

    public Date getFecha() {
        return fecha;
    }

    public void setFecha(Date fecha) {
        this.fecha = fecha;
    }

    public StreamedContent getFile() {
        return file;
    }

    public void setFile(StreamedContent file) {
        this.file = file;
    }
    
    public String getValorBuscado() {
        return valorBuscado;
    }

    public void setValorBuscado(String valorBuscado) {
        this.valorBuscado = valorBuscado.toUpperCase();
    }

    public int getRadioSelect() {
        return radioSelect;
    }

    public void setRadioSelect(int radioSelect) {
        this.radioSelect = radioSelect;
    }
    
    public void valueChange(ValueChangeEvent event)
			throws AbortProcessingException {
        //filteredMobiliario=null;
	int noEvento=(int) event.getNewValue();
        System.out.println("valueChange : "+noEvento);
	//mobiliarios=modao.traeRegistrosMobiliarioDepartamento(noDep);
        //dep=noDep;
        //nomUrReporte=mobiliarios.get(0).getUr();
        radioSelect=noEvento;
        noPersonalBm=null;
        nomPersonal=null;
        if(radioSelect==4){departamentos=depdao.traeRegistrosDepartamentoMobiliario(accesoC.getNoUsuario());}
        //PrimeFaces.current().ajax().update(":formMostrar:datosBitacora:rowDatos");
	}
    
    public void CargaVentanaInserta(String ob) {
        filteredMobiliario=null;
        PrimeFaces.current().ajax().update(":formParametros");
        PrimeFaces.current().executeScript("PF('dlgparametros').show();");
    }

    public void CargaVentanaModifica() {
        filteredMobiliario=null;
        PrimeFaces.current().ajax().update(":formModificar");
        PrimeFaces.current().executeScript("PF('dlgmodificar').show();");
    }

    public void insertar() {
        //bitacora.setIdDepartamento(bitdao.getNumeroSiguiente());
        //bitacora.setNoUsuarioAlta(accesoC.getNoUsuario());
        int valor = 1;//bitdao.insertaDepartamento(bitacora);
        if (valor == 1) {
            msg.info("Procesado..", "Registro guardado");
        } else {
            msg.warn("Error..", "No se guardo la informacion");
        }
        PrimeFaces.current().executeScript("PF('dlginsertar').hide();");
    }

    public void modificar() {
        int valor = 0;
        //System.out.println("departamento.DepartamentoControl.modificar()"+departamento.getNoUsuarioEnlace());
        bitacora.setNoUsuarioUltimaModif(accesoC.getNoUsuario());
            valor = 1;//bitdao.actualizaDepartamento(bitacora);
            if (valor == 1) {
                msg.info("Procesado..", "Registro actualizado");
            } else {
                msg.warn("Error", "No se actualizo la informacion");

            }

        PrimeFaces.current().executeScript("PF('dlgmodificar').hide();");
    }

    public void ActivarInactivar(int opcion) {

        System.out.println("valor: " + bitacora.getIdDepartamento());
        bitacora.setNoUsuarioBaja(accesoC.getNoUsuario());
                String dato = opcion == 1 ? "activó" : "inactivó";
                int valor = 1;//bitdao.eliminaDepartamento(bitacora,opcion);
                if (valor == 1) {
                    
                    msg.info("Procesado..", "Registro se "+dato);
                } else {
                    msg.warn("Error..", "No se "+dato+" el Registro");
                }
        PrimeFaces.current().executeScript("PF('dlgeliminar').hide();");
    }
    
     public void asignaNoPersonal(Personal per) {
        Integer noPer = per.getNoPersonalBm();
        System.out.println("asignaNoPersonal()" + noPer);
        noPersonalBm=noPer;
        nomPersonal=per.getNombre()+" "+per.getAp1()+" "+per.getAp2();
        PrimeFaces.current().executeScript("PF('dlgasignarper').hide();");
    }

   public void asignapersonalBusqueda(String valor) {
        if (!valor.isEmpty()) {
            personal = pdao.traeRegistrosPersonalBusqueda(valor);
            PrimeFaces.current().executeScript("PF('dlgasignarper').show();");
            PrimeFaces.current().ajax().update(":formAsignarPer");
            valorBuscado = null;
        } else {
            personal = null;
            PrimeFaces.current().ajax().update(":formAsignarPer");
            valorBuscado = null;
        }

    }

    public void llenarlistas() {
        
    }
    
    public void generarReporte() throws ParseException, FileNotFoundException{
    ReportesControl rc = new ReportesControl();
    SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
    if(fecha==null){Date fechaActual = new Date(); fecha=fechaActual;}
    String fechaReporte = format.format(fecha);
    file=rc.generaReporteJasper(dep,fechaReporte);
    fecha=null;
    }
    

    public void cancelarActualizar() {
        PrimeFaces.current().executeScript("PF('dlgmodificar').hide();");
    }

    public void cancelarEliminar() {
        PrimeFaces.current().executeScript("PF('dlgeliminar').hide();");
    }
    
    public void cancelarAsignarPersonal() {
        PrimeFaces.current().executeScript("PF('dlgasignarper').hide();");
    }
    public void cancelarAsignarEnlace() {
        PrimeFaces.current().executeScript("PF('dlgasignarenla').hide();");
    }
    public AccesoControl getAccesoC() {
        return accesoC;
    }

    public void setAccesoC(AccesoControl accesoC) {
        this.accesoC = accesoC;
    }


}
